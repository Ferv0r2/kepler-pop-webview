import { useCallback } from 'react';

import type { GridItem, GameState } from '@/types/game-types';

// ÌÉÄÏù¥Î®∏ Í¥ÄÎ¶¨Ïûê ÌÅ¥ÎûòÏä§
export class TimerManager {
  private timers = new Set<NodeJS.Timeout>();
  private intervals = new Set<NodeJS.Timeout>();

  setTimeout = (callback: () => void, delay: number): NodeJS.Timeout => {
    const timer = setTimeout(() => {
      this.timers.delete(timer);
      callback();
    }, delay);
    this.timers.add(timer);
    return timer;
  };

  setInterval = (callback: () => void, delay: number): NodeJS.Timeout => {
    const interval = setInterval(callback, delay);
    this.intervals.add(interval);
    return interval;
  };

  clearTimeout = (timer: NodeJS.Timeout): void => {
    clearTimeout(timer);
    this.timers.delete(timer);
  };

  clearInterval = (interval: NodeJS.Timeout): void => {
    clearInterval(interval);
    this.intervals.delete(interval);
  };

  cleanup = (): void => {
    this.timers.forEach((timer) => clearTimeout(timer));
    this.intervals.forEach((interval) => clearInterval(interval));
    this.timers.clear();
    this.intervals.clear();
  };

  getActiveCount = (): number => {
    return this.timers.size + this.intervals.size;
  };
}

// Î©îÎ™®Î¶¨ ÏÇ¨Ïö©Îüâ Î™®ÎãàÌÑ∞ÎßÅ
export const useMemoryMonitor = () => {
  const checkMemory = useCallback(() => {
    if ('memory' in performance) {
      const memory = (
        performance as { memory: { usedJSHeapSize: number; totalJSHeapSize: number; jsHeapSizeLimit: number } }
      ).memory;
      const used = Math.round(memory.usedJSHeapSize / 1024 / 1024);
      const total = Math.round(memory.totalJSHeapSize / 1024 / 1024);
      const limit = Math.round(memory.jsHeapSizeLimit / 1024 / 1024);

      const percentage = (used / limit) * 100;

      if (percentage > 80) {
        console.warn(`‚ö†Ô∏è Î©îÎ™®Î¶¨ ÏÇ¨Ïö©Îüâ ÎÜíÏùå: ${used}MB / ${limit}MB (${percentage.toFixed(1)}%)`);

        // Í∞ÄÎπÑÏßÄ Ïª¨Î†âÏÖò Ï†úÏïà
        if (percentage > 90) {
          console.error('üö® Î©îÎ™®Î¶¨ ÏûÑÍ≥ÑÏπò Ï¥àÍ≥º! Í∞ÄÎπÑÏßÄ Ïª¨Î†âÏÖò ÌïÑÏöî');
          // Í∞ïÏ†ú Í∞ÄÎπÑÏßÄ Ïª¨Î†âÏÖò (Í∞úÎ∞ú ÌôòÍ≤ΩÏóêÏÑúÎßå)
          if (process.env.NODE_ENV === 'development' && 'gc' in window) {
            (window as { gc: () => void }).gc();
          }
        }
      }

      return { used, total, limit, percentage };
    }
    return null;
  }, []);

  return { checkMemory };
};

// ÏµúÏ†ÅÌôîÎêú Í∑∏Î¶¨Îìú Î≥µÏÇ¨ Ìï®Ïàò
export const shallowCopyGrid = (grid: GridItem[][]): GridItem[][] => {
  return grid.map((row) => row.map((item) => ({ ...item })));
};

// ÏÑ†ÌÉùÏ†Å Í∑∏Î¶¨Îìú ÏóÖÎç∞Ïù¥Ìä∏ (Î©îÎ™®Î¶¨ Ìö®Ïú®Ï†Å)
export const updateGridSelective = (
  grid: GridItem[][],
  updates: Array<{ row: number; col: number; changes: Partial<GridItem> }>,
): GridItem[][] => {
  // Î≥ÄÍ≤ΩÏù¥ ÌïÑÏöîÌïú ÌñâÎßå Î≥µÏÇ¨
  const updatedRows = new Set(updates.map((u) => u.row));
  const newGrid = grid.map((row, rowIndex) => {
    if (!updatedRows.has(rowIndex)) {
      return row; // Î≥ÄÍ≤ΩÎêòÏßÄ ÏïäÏùÄ ÌñâÏùÄ Í∑∏ÎåÄÎ°ú Ï∞∏Ï°∞
    }

    // Î≥ÄÍ≤ΩÏù¥ ÌïÑÏöîÌïú ÌñâÎßå ÏÉàÎ°ú ÏÉùÏÑ±
    return row.map((item, colIndex) => {
      const update = updates.find((u) => u.row === rowIndex && u.col === colIndex);
      return update ? { ...item, ...update.changes } : item;
    });
  });

  return newGrid;
};

// GameState Í¥ÄÎ¶¨Î•º ÏúÑÌïú reducer
export interface GameStateAction {
  type:
    | 'UPDATE_SCORE'
    | 'UPDATE_MOVES'
    | 'UPDATE_COMBO'
    | 'UPDATE_TURN'
    | 'SET_SWAPPING'
    | 'SET_CHECKING'
    | 'SET_GAME_OVER'
    | 'SET_PROCESSING'
    | 'RESET';
  payload?: Partial<GameState>;
}

export const gameStateReducer = (state: GameState, action: GameStateAction): GameState => {
  switch (action.type) {
    case 'UPDATE_SCORE':
      return { ...state, score: action.payload?.score ?? state.score };
    case 'UPDATE_MOVES':
      return { ...state, moves: action.payload?.moves ?? state.moves };
    case 'UPDATE_COMBO':
      return { ...state, combo: action.payload?.combo ?? state.combo };
    case 'UPDATE_TURN':
      return { ...state, turn: action.payload?.turn ?? state.turn };
    case 'SET_SWAPPING':
      return { ...state, isSwapping: action.payload?.isSwapping ?? false };
    case 'SET_CHECKING':
      return { ...state, isChecking: action.payload?.isChecking ?? false };
    case 'SET_GAME_OVER':
      return { ...state, isGameOver: action.payload?.isGameOver ?? false };
    case 'SET_PROCESSING':
      return { ...state, isProcessingMatches: action.payload?.isProcessingMatches ?? false };
    case 'RESET':
      return action.payload as GameState;
    default:
      return state;
  }
};

// UI ÏÉÅÌÉú Í¥ÄÎ¶¨Î•º ÏúÑÌïú reducer
export interface UIState {
  showScorePopup: { score: number; x: number; y: number } | null;
  showBackConfirmation: boolean;
  showSettingsMenu: boolean;
  showHint: boolean;
  showTutorial: boolean;
  tutorialStep: number;
  showShuffleToast: boolean;
  showRestartConfirmation: boolean;
  showEnergyModal: boolean;
  showReviveOptions: boolean;
  isReviveAdLoading: boolean;
  showShuffleConfirmation: boolean;
  showShuffleButton: boolean;
  isShuffling: boolean;
  showBonusMovesAnimation: number;
  isLoading: boolean;
  longPressItem: string | null;
}

export interface UIStateAction {
  type: keyof UIState | 'RESET_ALL' | 'BATCH_UPDATE';
  payload?: Partial<UIState>;
}

export const uiStateReducer = (state: UIState, action: UIStateAction): UIState => {
  switch (action.type) {
    case 'RESET_ALL':
      return {
        showScorePopup: null,
        showBackConfirmation: false,
        showSettingsMenu: false,
        showHint: false,
        showTutorial: false,
        tutorialStep: 1,
        showShuffleToast: false,
        showRestartConfirmation: false,
        showEnergyModal: false,
        showReviveOptions: false,
        isReviveAdLoading: false,
        showShuffleConfirmation: false,
        showShuffleButton: false,
        isShuffling: false,
        showBonusMovesAnimation: 0,
        isLoading: false,
        longPressItem: null,
      };
    case 'BATCH_UPDATE':
      return { ...state, ...action.payload };
    default:
      return { ...state, [action.type]: action.payload?.[action.type] };
  }
};
